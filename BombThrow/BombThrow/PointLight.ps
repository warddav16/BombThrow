
cbuffer LightBufferType
{
	float4 lightPos;
	float4 diffuseColor;
	float4 specularColor;
	float specularPower;
	float3 padding;
};

Texture2D colorTexture : register(t0);
Texture2D normalTexture : register(t1);

SamplerState SampleTypePoint : register(s0);

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 PointLightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textDiff = colorTexture.Sample(SampleTypePoint, input.tex);
	float4 normal = normalTexture.Sample(SampleTypePoint, input.tex);
	return saturate(diffuseColor * saturate(dot(normal, lightPos))) * textDiff;
}