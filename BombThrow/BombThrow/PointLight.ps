
cbuffer LightBufferType
{
	float4 lightPos;
	float4 diffuseColor;
	float4 specularColor;
	float specularPower;
	float radius;
	float2 padding;
};

Texture2D colorTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D positionTexture : register(t2);

SamplerState SampleTypePoint : register(s0);

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 PointLightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textDiff = colorTexture.Sample(SampleTypePoint, input.tex);
	float4 normal = normalTexture.Sample(SampleTypePoint, input.tex);
	float4 pos = positionTexture.Sample(SampleTypePoint, input.tex);
	float4 L = pos - lightPos;
	float4 eye = -(normalize(pos));
	
	float4 lightDir = normalize(L);                                                                        
	float nDotL = clamp(dot(normalize(normal), lightDir), 0, 1);
	float4 lightReflect = normalize(reflect(lightDir, normal));
	float specFactor = dot(eye, lightReflect);
	specFactor = max(pow(specFactor, specularPower), 0);
	float4 specColor = specularColor * specularPower;

	return textDiff * (nDotL * diffuseColor + specColor);
}