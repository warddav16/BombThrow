
cbuffer LightBufferType
{
	float4 lightPos;
	float4 diffuseColor;
	float4 specularColor;
	float4 cameraPos;
	float specularPower;
	float radius;
	float2 padding;
};

Texture2D colorTexture : register(t0);
Texture2D normalTexture : register(t1);
Texture2D positionTexture : register(t2);

SamplerState SampleTypePoint : register(s0);

struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

float4 PointLightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textDiff = colorTexture.Sample(SampleTypePoint, input.tex);
	float4 normal = normalTexture.Sample(SampleTypePoint, input.tex);
	float4 pos = positionTexture.Sample(SampleTypePoint, input.tex);

	float4 color = float4(0,0,0,0);
	float4 specular = float4(0,0,0,0);
	float4 L = lightPos - pos;
	float4 lightDir = normalize(L);                                                                        
	float nDotL = saturate(dot(normalize(normal), lightDir));
	float attenuation = saturate(1.0f - length(L) / radius);

	if(nDotL > 0)
	{
		color += diffuseColor * nDotL;
		color = saturate(color);
		float4 reflection = normalize(2 * nDotL * normal - lightDir);
		float4 viewDirection = normalize(cameraPos - pos);
		specular = saturate(specularColor *  pow(saturate(dot(reflection, viewDirection)), specularPower));
	}

	color = color * textDiff;
	color = saturate(color + specular);
	return color;
}